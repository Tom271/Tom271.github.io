import{s as za,n as Ot}from"./scheduler.B-8LQpXJ.js";import{S as Ga,i as Na,e,s as o,H as r,a as p,g as i,c as l,f as u,j as k,d as a,k as m,b as s}from"./index.CtSOuxl2.js";function Ua(Ma){let c,Bt='UPDATE (25/07/20): It seems my initial search for packages that do this was not hitting the right keywords. I’ve since found there are <a href="https://gist.github.com/mnarayan/d33ea8a13c9d5da7c4d0" rel="nofollow">quite a few out there!</a> For now, I’m still using a version based on what’s below. The next step is to look into the existing packages and see what fits my need best. I think it is still an interesting task to develop an experiment manager out of the work below---watch this space.',X,d,Qt='During my work on particle systems, I have spent a lot of time simulating trajectories of particles using different parameters and initial conditions. Until now, I’d been either running a new simulation every time, or saving individual datasets with filenames like <code>GammaFullScaling04</code>, or other incomprehensible strings made by concatenating parameter values. As the amount of data has increased, this has become untenable, so I’ve been spending some time recently coming up with a better way. This problem is not unique to my situation, I imagine many scientists are in a similar position! After some googling, I couldn’t find any clear method. After a chat with <a href="https://sebstrug.com/" rel="nofollow">a data engineering friend of mine</a> he suggested looking into <code>.yaml</code> files as a way to store parameters.',Z,h,Vt="There are two main problems I needed to solve:",$,f,Jt="<li>How can I associate a parameter set with a data file?</li> <li>How can I retrieve the data file quickly when I want to use it again?</li>",tt,y,Kt="These themselves are associated with the two obvious parts of data storage: reading and writing. Each of these poses their own questions. My current data pipeline is as follows:",at,w,Xt="This probably raises more questions than it answers but hopefully what follows will answer them.",nt,v,Zt="Writing Data: Storage Format",st,g,$t='The data comes from the simulation as two large matrices (on the order of 100 columns and 1000 rows.). The simplest way to store data in Python is using the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">Pickle</a> module. This module is very easy to use, and can be used to store <em>any</em> Python object. Such flexibility wasn’t really required here, I knew a lot about the type of data coming in (as I was generating it myself). As an easy method, this is what I was using for the past 6 months. However after having a look around, it seems <a href="https://www.benfrederickson.com/dont-pickle-your-data/" rel="nofollow">Pickle is not the best way</a>. This prompted me to look into other alternatives. The typical way in most science seems to be using a <code>.csv</code> file. This has a few benefits: it is widely supported, readable and <a href="https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d" rel="nofollow">still beats many more modern methods</a>. Two relatively new formats on the scene are <a href="https://blog.rstudio.com/2016/03/29/feather/" rel="nofollow">feather</a> and <a href="https://arrow.apache.org/docs/python/parquet.html" rel="nofollow">parquet</a>. These are attractive as they allow for smaller file sizes, faster read/write speed and support across more languages. After reading around, I settled on using feather to store data.',et,_,ta="Writing Data: Storing Parameter Sets",pt,b,aa='Previously, I’d remember which parameter sets generated what data by naming the file with a list of parameters, or having a file tree where each folder had a parameter choice. Obviously, this is not the best way. Looking for a data set usually meant guessing what order the parameters were saved in and lots of clicking. Now I use a <code>.yaml</code> file. This is a way of storing what is effectively a large Python dictionary, which can be read in using <a href="https://pypi.org/project/PyYAML/" rel="nofollow"><code>pyyaml</code></a>. The keys of the dictionary are the filenames of the data, and the values are also dictionaries that contain parameter sets. File names were randomly generated using <a href="https://pypi.org/project/coolname/" rel="nofollow"><code>coolname</code></a> . Any random string can be used, but not all of them will be as amusing.',ot,x,na="The first step is to read in the <code>.yaml</code> file:",lt,C,it,Ia=`<code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
	<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">".yaml"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
		history <span class="token operator">=</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error reading the config file"</span><span class="token punctuation">)</span></code>`,ct,T,sa="Now we have a dictionary called <code>history</code> containing all the previously ran parameter sets. This can be searched to see if it contains the parameter set you’re currently interested in:",rt,P,ut,Ea=`<code class="language-python"><span class="token keyword">for</span> name <span class="token keyword">in</span> history<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Given parameters are exact match of existing set:"</span><span class="token punctuation">)</span>
        filename <span class="token operator">=</span> name</code>`,kt,H,ea="So we iterate through the keys (filenames) in the history and see if there is an exact match to the parameter set. For my parameters, I’m also interested if a subset has been ran:",mt,L,dt,qa=`<code class="language-python"><span class="token keyword">elif</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>
      <span class="token string">"Given parameters are subset of existing set, additional parameters are:"</span>
  <span class="token punctuation">)</span>
  additional_parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      k<span class="token punctuation">:</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>additional_parameters<span class="token punctuation">)</span>
  filename <span class="token operator">=</span> name</code>`,ht,M,pa="Finally, for some parameters the value may not matter as much. For example, say I want to run a simulation with a parameter set for 20 seconds. If I’ve already ran the same set for 50 seconds, there is not much point in re-simulating—instead the first 20 seconds of the old data should be retrieved. This is very much dependent on what your parameters mean and should be done on a case-by-case, parameter-by-parameter basis.",ft,I,oa="If the parameter set has not been ran before, it needs to be added to the <code>.yaml</code> file:",yt,E,wt,Fa=`<code class="language-python">filename <span class="token operator">=</span> coolname<span class="token punctuation">.</span>generate_slug<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">".yaml"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token comment"># Add parameters and name to dictionary</span>
	history<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>filename<span class="token punctuation">:</span> parameters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment"># Update the yaml file</span>
    yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>history<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span></code>`,vt,q,la="Writing Data: Simulating and Storing",gt,F,ia="Simulating is as simple as passing the dictionary to the simulation function:",_t,S,bt,Sa='<code class="language-python">x<span class="token punctuation">,</span> v <span class="token operator">=</span> ParticleSystem<span class="token punctuation">(</span><span class="token operator">**</span>parameters<span class="token punctuation">)</span><span class="token punctuation">.</span>get_trajectories<span class="token punctuation">(</span><span class="token punctuation">)</span></code>',xt,D,ca='The <code>**</code> unpacks the dictionary as keywords arguments (like <code>**kwargs</code>). Here, <code>x,v</code> are large <a href="https://numpy.org/" rel="nofollow">NumPy</a> arrays. To store these arrays, I convert them to a <a href="https://pandas.pydata.org/" rel="nofollow">Pandas</a> dataframe before saving them using <a href="https://github.com/wesm/feather" rel="nofollow">Feather</a>—in fact, this is now built in to Pandas using the <code>to_feather</code> function. To save using Feather, column names must be strings.',Ct,A,Tt,Da=`<code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
position_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
velocity_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>v<span class="token punctuation">)</span>

<span class="token comment"># Map column names to strings</span>
position_df<span class="token punctuation">.</span>columns <span class="token operator">=</span> position_df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
velocity_df<span class="token punctuation">.</span>columns <span class="token operator">=</span> velocity_df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>

velocity_df<span class="token punctuation">.</span>to_feather<span class="token punctuation">(</span>filepath <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"_v"</span><span class="token punctuation">)</span>
position_df<span class="token punctuation">.</span>to_feather<span class="token punctuation">(</span>filepath <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"_x"</span><span class="token punctuation">)</span></code>`,Pt,R,ra="So now we have a data file saved, named using a random string that is stored in the <code>.yaml</code> file!",Ht,j,ua="Reading Data: Searching the YAML",Lt,z,ka="To retrieve a data set, first create a dictionary of the parameters:",Mt,G,It,Aa=`<code class="language-python">parameters<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    <span class="token string">"T_end"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`,Et,N,ma="Then we search the YAML file to see if any simulations match this parameter set:",qt,U,Ft,Ra=`<code class="language-python"><span class="token keyword">for</span> name <span class="token keyword">in</span> history<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
 		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Given parameters are exact match of existing set:"</span><span class="token punctuation">)</span>
        filename <span class="token operator">=</span> name
	<span class="token keyword">elif</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span>
                <span class="token string">"Given parameters are subset of existing set, additional parameters are:"</span>
            <span class="token punctuation">)</span>
		additional_parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        	k<span class="token punctuation">:</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">set</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span>additional_parameters<span class="token punctuation">)</span>
        filename <span class="token operator">=</span> name

<span class="token keyword">if</span> filename <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not find matching parameter set"</span><span class="token punctuation">)</span></code>`,St,W,da="Finally to read the data in:",Dt,Y,At,ja=`<code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
	test_data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>file_path <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not find file &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
parameters <span class="token operator">=</span> history<span class="token punctuation">.</span>get<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
x<span class="token punctuation">,</span> v <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">"Position"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_data<span class="token punctuation">[</span><span class="token string">"Velocity"</span><span class="token punctuation">]</span></code>`,Rt,O,ha="So now the two Numpy arrays have been retrieved!",jt,zt,Gt,B,fa="This is one way to store parameters and data, but I’d be interested in hearing your ways! Are there glaring errors here? Get in touch!",Nt,Q,ya="Questions I still have include:",Ut,V,wa="<li>When the <code>.yaml</code> file gets too big, searching for a parameter set takes longer and longer: is there a quicker way of searching? Or of splitting the <code>.yaml</code>?</li> <li>Is Feather the best format to use here?</li>",Wt,J,va="Useful Links",Yt,K,ga='<li><a href="https://www.benfrederickson.com/dont-pickle-your-data/" rel="nofollow">Don’t Pickle Your Data</a></li> <li><a href="https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d" rel="nofollow">Best format for pd DataFrame</a></li> <li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet" rel="nofollow">Parquet Pandas docs</a></li> <li><a href="https://blog.rstudio.com/2016/03/29/feather/" rel="nofollow">Feather</a></li> <li><a href="https://stackoverflow.com/questions/48083405/what-are-the-differences-between-feather-and-parquet" rel="nofollow">Difference between Parquet and Feather</a></li>';return{c(){c=e("p"),c.innerHTML=Bt,X=o(),d=e("p"),d.innerHTML=Qt,Z=o(),h=e("p"),h.textContent=Vt,$=o(),f=e("ol"),f.innerHTML=Jt,tt=o(),y=e("p"),y.textContent=Kt,at=o(),w=e("p"),w.textContent=Xt,nt=o(),v=e("h2"),v.textContent=Zt,st=o(),g=e("p"),g.innerHTML=$t,et=o(),_=e("h2"),_.textContent=ta,pt=o(),b=e("p"),b.innerHTML=aa,ot=o(),x=e("p"),x.innerHTML=na,lt=o(),C=e("pre"),it=new r(!1),ct=o(),T=e("p"),T.innerHTML=sa,rt=o(),P=e("pre"),ut=new r(!1),kt=o(),H=e("p"),H.textContent=ea,mt=o(),L=e("pre"),dt=new r(!1),ht=o(),M=e("p"),M.textContent=pa,ft=o(),I=e("p"),I.innerHTML=oa,yt=o(),E=e("pre"),wt=new r(!1),vt=o(),q=e("h2"),q.textContent=la,gt=o(),F=e("p"),F.textContent=ia,_t=o(),S=e("pre"),bt=new r(!1),xt=o(),D=e("p"),D.innerHTML=ca,Ct=o(),A=e("pre"),Tt=new r(!1),Pt=o(),R=e("p"),R.innerHTML=ra,Ht=o(),j=e("h2"),j.textContent=ua,Lt=o(),z=e("p"),z.textContent=ka,Mt=o(),G=e("pre"),It=new r(!1),Et=o(),N=e("p"),N.textContent=ma,qt=o(),U=e("pre"),Ft=new r(!1),St=o(),W=e("p"),W.textContent=da,Dt=o(),Y=e("pre"),At=new r(!1),Rt=o(),O=e("p"),O.textContent=ha,jt=o(),zt=e("hr"),Gt=o(),B=e("p"),B.textContent=fa,Nt=o(),Q=e("p"),Q.textContent=ya,Ut=o(),V=e("ul"),V.innerHTML=wa,Wt=o(),J=e("h2"),J.textContent=va,Yt=o(),K=e("ul"),K.innerHTML=ga,this.h()},l(t){c=p(t,"P",{"data-svelte-h":!0}),i(c)!=="svelte-19ljbi4"&&(c.innerHTML=Bt),X=l(t),d=p(t,"P",{"data-svelte-h":!0}),i(d)!=="svelte-12xgmli"&&(d.innerHTML=Qt),Z=l(t),h=p(t,"P",{"data-svelte-h":!0}),i(h)!=="svelte-43n9wh"&&(h.textContent=Vt),$=l(t),f=p(t,"OL",{"data-svelte-h":!0}),i(f)!=="svelte-hsxgly"&&(f.innerHTML=Jt),tt=l(t),y=p(t,"P",{"data-svelte-h":!0}),i(y)!=="svelte-1boxmnx"&&(y.textContent=Kt),at=l(t),w=p(t,"P",{"data-svelte-h":!0}),i(w)!=="svelte-kwvxk0"&&(w.textContent=Xt),nt=l(t),v=p(t,"H2",{"data-svelte-h":!0}),i(v)!=="svelte-18ghr24"&&(v.textContent=Zt),st=l(t),g=p(t,"P",{"data-svelte-h":!0}),i(g)!=="svelte-1nmcogi"&&(g.innerHTML=$t),et=l(t),_=p(t,"H2",{"data-svelte-h":!0}),i(_)!=="svelte-19mxcli"&&(_.textContent=ta),pt=l(t),b=p(t,"P",{"data-svelte-h":!0}),i(b)!=="svelte-mtffe1"&&(b.innerHTML=aa),ot=l(t),x=p(t,"P",{"data-svelte-h":!0}),i(x)!=="svelte-1vujvg"&&(x.innerHTML=na),lt=l(t),C=p(t,"PRE",{class:!0});var n=u(C);it=k(n,!1),n.forEach(a),ct=l(t),T=p(t,"P",{"data-svelte-h":!0}),i(T)!=="svelte-1vxdm7q"&&(T.innerHTML=sa),rt=l(t),P=p(t,"PRE",{class:!0});var _a=u(P);ut=k(_a,!1),_a.forEach(a),kt=l(t),H=p(t,"P",{"data-svelte-h":!0}),i(H)!=="svelte-1szkmv5"&&(H.textContent=ea),mt=l(t),L=p(t,"PRE",{class:!0});var ba=u(L);dt=k(ba,!1),ba.forEach(a),ht=l(t),M=p(t,"P",{"data-svelte-h":!0}),i(M)!=="svelte-n77ctt"&&(M.textContent=pa),ft=l(t),I=p(t,"P",{"data-svelte-h":!0}),i(I)!=="svelte-1rz5ona"&&(I.innerHTML=oa),yt=l(t),E=p(t,"PRE",{class:!0});var xa=u(E);wt=k(xa,!1),xa.forEach(a),vt=l(t),q=p(t,"H2",{"data-svelte-h":!0}),i(q)!=="svelte-xepaje"&&(q.textContent=la),gt=l(t),F=p(t,"P",{"data-svelte-h":!0}),i(F)!=="svelte-tbwxna"&&(F.textContent=ia),_t=l(t),S=p(t,"PRE",{class:!0});var Ca=u(S);bt=k(Ca,!1),Ca.forEach(a),xt=l(t),D=p(t,"P",{"data-svelte-h":!0}),i(D)!=="svelte-11u84l4"&&(D.innerHTML=ca),Ct=l(t),A=p(t,"PRE",{class:!0});var Ta=u(A);Tt=k(Ta,!1),Ta.forEach(a),Pt=l(t),R=p(t,"P",{"data-svelte-h":!0}),i(R)!=="svelte-1b6t349"&&(R.innerHTML=ra),Ht=l(t),j=p(t,"H2",{"data-svelte-h":!0}),i(j)!=="svelte-uwzt4y"&&(j.textContent=ua),Lt=l(t),z=p(t,"P",{"data-svelte-h":!0}),i(z)!=="svelte-1dnfdzb"&&(z.textContent=ka),Mt=l(t),G=p(t,"PRE",{class:!0});var Pa=u(G);It=k(Pa,!1),Pa.forEach(a),Et=l(t),N=p(t,"P",{"data-svelte-h":!0}),i(N)!=="svelte-1ggaamq"&&(N.textContent=ma),qt=l(t),U=p(t,"PRE",{class:!0});var Ha=u(U);Ft=k(Ha,!1),Ha.forEach(a),St=l(t),W=p(t,"P",{"data-svelte-h":!0}),i(W)!=="svelte-61upwi"&&(W.textContent=da),Dt=l(t),Y=p(t,"PRE",{class:!0});var La=u(Y);At=k(La,!1),La.forEach(a),Rt=l(t),O=p(t,"P",{"data-svelte-h":!0}),i(O)!=="svelte-1u8ak3z"&&(O.textContent=ha),jt=l(t),zt=p(t,"HR",{}),Gt=l(t),B=p(t,"P",{"data-svelte-h":!0}),i(B)!=="svelte-1aq0bcf"&&(B.textContent=fa),Nt=l(t),Q=p(t,"P",{"data-svelte-h":!0}),i(Q)!=="svelte-tk39i8"&&(Q.textContent=ya),Ut=l(t),V=p(t,"UL",{"data-svelte-h":!0}),i(V)!=="svelte-xbtzq6"&&(V.innerHTML=wa),Wt=l(t),J=p(t,"H2",{"data-svelte-h":!0}),i(J)!=="svelte-75lh0t"&&(J.textContent=va),Yt=l(t),K=p(t,"UL",{"data-svelte-h":!0}),i(K)!=="svelte-14c319w"&&(K.innerHTML=ga),this.h()},h(){it.a=null,m(C,"class","language-python"),ut.a=null,m(P,"class","language-python"),dt.a=null,m(L,"class","language-python"),wt.a=null,m(E,"class","language-python"),bt.a=null,m(S,"class","language-python"),Tt.a=null,m(A,"class","language-python"),It.a=null,m(G,"class","language-python"),Ft.a=null,m(U,"class","language-python"),At.a=null,m(Y,"class","language-python")},m(t,n){s(t,c,n),s(t,X,n),s(t,d,n),s(t,Z,n),s(t,h,n),s(t,$,n),s(t,f,n),s(t,tt,n),s(t,y,n),s(t,at,n),s(t,w,n),s(t,nt,n),s(t,v,n),s(t,st,n),s(t,g,n),s(t,et,n),s(t,_,n),s(t,pt,n),s(t,b,n),s(t,ot,n),s(t,x,n),s(t,lt,n),s(t,C,n),it.m(Ia,C),s(t,ct,n),s(t,T,n),s(t,rt,n),s(t,P,n),ut.m(Ea,P),s(t,kt,n),s(t,H,n),s(t,mt,n),s(t,L,n),dt.m(qa,L),s(t,ht,n),s(t,M,n),s(t,ft,n),s(t,I,n),s(t,yt,n),s(t,E,n),wt.m(Fa,E),s(t,vt,n),s(t,q,n),s(t,gt,n),s(t,F,n),s(t,_t,n),s(t,S,n),bt.m(Sa,S),s(t,xt,n),s(t,D,n),s(t,Ct,n),s(t,A,n),Tt.m(Da,A),s(t,Pt,n),s(t,R,n),s(t,Ht,n),s(t,j,n),s(t,Lt,n),s(t,z,n),s(t,Mt,n),s(t,G,n),It.m(Aa,G),s(t,Et,n),s(t,N,n),s(t,qt,n),s(t,U,n),Ft.m(Ra,U),s(t,St,n),s(t,W,n),s(t,Dt,n),s(t,Y,n),At.m(ja,Y),s(t,Rt,n),s(t,O,n),s(t,jt,n),s(t,zt,n),s(t,Gt,n),s(t,B,n),s(t,Nt,n),s(t,Q,n),s(t,Ut,n),s(t,V,n),s(t,Wt,n),s(t,J,n),s(t,Yt,n),s(t,K,n)},p:Ot,i:Ot,o:Ot,d(t){t&&(a(c),a(X),a(d),a(Z),a(h),a($),a(f),a(tt),a(y),a(at),a(w),a(nt),a(v),a(st),a(g),a(et),a(_),a(pt),a(b),a(ot),a(x),a(lt),a(C),a(ct),a(T),a(rt),a(P),a(kt),a(H),a(mt),a(L),a(ht),a(M),a(ft),a(I),a(yt),a(E),a(vt),a(q),a(gt),a(F),a(_t),a(S),a(xt),a(D),a(Ct),a(A),a(Pt),a(R),a(Ht),a(j),a(Lt),a(z),a(Mt),a(G),a(Et),a(N),a(qt),a(U),a(St),a(W),a(Dt),a(Y),a(Rt),a(O),a(jt),a(zt),a(Gt),a(B),a(Nt),a(Q),a(Ut),a(V),a(Wt),a(J),a(Yt),a(K))}}}const Oa={title:"Saving Simulation Data and Parameters Efficiently",shorttitle:"Saving Simulation Data and Parameters Efficiently",date:"2020-03-01"};class Ba extends Ga{constructor(c){super(),Na(this,c,null,Ua,za,{})}}export{Ba as default,Oa as metadata};
