import"./CWj6FrbW.js";import"./cDJUE48w.js";import{_ as o,$ as e,a0 as p,a1 as l,a2 as c,a3 as r}from"./Cq5oBeou.js";import{h as i}from"./EOlpS_F0.js";const u={title:"Canards in the Van der Pol System",date:"2018-12-28",tags:["draft"]},{title:f,date:w,tags:y}=u;var k=o('<h2>OUT OF DATE // DRAFT // OUT OF DATE</h2> <p>Jekyll supports the use of <a href="http://daringfireball.net/projects/markdown/syntax" rel="nofollow">Markdown</a> with inline HTML tags which makes it easier to quickly write posts with Jekyll, without having to worry too much about text formatting. A sample of the formatting follows.</p> <p>Tables have also been extended from Markdown:</p> <table><thead><tr><th>First Header</th><th>Second Header</th></tr></thead><tbody><tr><td>Content Cell</td><td>Content Cell</td></tr><tr><td>Content Cell</td><td>Content Cell</td></tr></tbody></table> <p>Hereâ€™s an example of an image, which is included using Markdown:</p> <p>Highlighting for code in Jekyll is done using Pygments or Rouge. This theme makes use of Rouge by default.</p> <pre class="language-js"><!></pre>',1);function b(s){var n=k(),a=e(p(n),12),t=c(a);i(t,()=>`<code class="language-js"><span class="token comment">// count to ten</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// count to twenty</span>
<span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	j<span class="token operator">++</span><span class="token punctuation">;</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`),r(a),l(s,n)}export{b as default,u as metadata};
