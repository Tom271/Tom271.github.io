import"./CWj6FrbW.js";import"./C4_hL9aG.js";import{_ as T,a1 as a,a2 as x,$ as F,a3 as n,a4 as s,a0 as P}from"./B04gGUFm.js";import{h as t}from"./xQ9oqbA1.js";const S={title:"Saving Simulation Data and Parameters Efficiently",shorttitle:"Saving Simulation Data and Parameters Efficiently",date:"2020-03-01"},{title:N,shorttitle:j,date:L}=S;var D=T('<p>UPDATE (25/07/20): It seems my initial search for packages that do this was not hitting the right keywords. I’ve since found there are <a href="https://gist.github.com/mnarayan/d33ea8a13c9d5da7c4d0" rel="nofollow">quite a few out there!</a> For now, I’m still using a version based on what’s below. The next step is to look into the existing packages and see what fits my need best. I think it is still an interesting task to develop an experiment manager out of the work below---watch this space.</p> <p>During my work on particle systems, I have spent a lot of time simulating trajectories of particles using different parameters and initial conditions. Until now, I’d been either running a new simulation every time, or saving individual datasets with filenames like <code>GammaFullScaling04</code>, or other incomprehensible strings made by concatenating parameter values. As the amount of data has increased, this has become untenable, so I’ve been spending some time recently coming up with a better way. This problem is not unique to my situation, I imagine many scientists are in a similar position! After some googling, I couldn’t find any clear method. After a chat with <a href="https://sebstrug.com/" rel="nofollow">a data engineering friend of mine</a> he suggested looking into <code>.yaml</code> files as a way to store parameters.</p> <p>There are two main problems I needed to solve:</p> <ol><li>How can I associate a parameter set with a data file?</li> <li>How can I retrieve the data file quickly when I want to use it again?</li></ol> <p>These themselves are associated with the two obvious parts of data storage: reading and writing. Each of these poses their own questions. My current data pipeline is as follows:</p> <p>This probably raises more questions than it answers but hopefully what follows will answer them.</p> <h2>Writing Data: Storage Format</h2> <p>The data comes from the simulation as two large matrices (on the order of 100 columns and 1000 rows.). The simplest way to store data in Python is using the <a href="https://docs.python.org/3/library/pickle.html" rel="nofollow">Pickle</a> module. This module is very easy to use, and can be used to store <em>any</em> Python object. Such flexibility wasn’t really required here, I knew a lot about the type of data coming in (as I was generating it myself). As an easy method, this is what I was using for the past 6 months. However after having a look around, it seems <a href="https://www.benfrederickson.com/dont-pickle-your-data/" rel="nofollow">Pickle is not the best way</a>. This prompted me to look into other alternatives. The typical way in most science seems to be using a <code>.csv</code> file. This has a few benefits: it is widely supported, readable and <a href="https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d" rel="nofollow">still beats many more modern methods</a>. Two relatively new formats on the scene are <a href="https://blog.rstudio.com/2016/03/29/feather/" rel="nofollow">feather</a> and <a href="https://arrow.apache.org/docs/python/parquet.html" rel="nofollow">parquet</a>. These are attractive as they allow for smaller file sizes, faster read/write speed and support across more languages. After reading around, I settled on using feather to store data.</p> <h2>Writing Data: Storing Parameter Sets</h2> <p>Previously, I’d remember which parameter sets generated what data by naming the file with a list of parameters, or having a file tree where each folder had a parameter choice. Obviously, this is not the best way. Looking for a data set usually meant guessing what order the parameters were saved in and lots of clicking. Now I use a <code>.yaml</code> file. This is a way of storing what is effectively a large Python dictionary, which can be read in using <a href="https://pypi.org/project/PyYAML/" rel="nofollow"><code>pyyaml</code></a>. The keys of the dictionary are the filenames of the data, and the values are also dictionaries that contain parameter sets. File names were randomly generated using <a href="https://pypi.org/project/coolname/" rel="nofollow"><code>coolname</code></a> . Any random string can be used, but not all of them will be as amusing.</p> <p>The first step is to read in the <code>.yaml</code> file:</p> <pre class="language-python"><!></pre> <p>Now we have a dictionary called <code>history</code> containing all the previously ran parameter sets. This can be searched to see if it contains the parameter set you’re currently interested in:</p> <pre class="language-python"><!></pre> <p>So we iterate through the keys (filenames) in the history and see if there is an exact match to the parameter set. For my parameters, I’m also interested if a subset has been ran:</p> <pre class="language-python"><!></pre> <p>Finally, for some parameters the value may not matter as much. For example, say I want to run a simulation with a parameter set for 20 seconds. If I’ve already ran the same set for 50 seconds, there is not much point in re-simulating—instead the first 20 seconds of the old data should be retrieved. This is very much dependent on what your parameters mean and should be done on a case-by-case, parameter-by-parameter basis.</p> <p>If the parameter set has not been ran before, it needs to be added to the <code>.yaml</code> file:</p> <pre class="language-python"><!></pre> <h2>Writing Data: Simulating and Storing</h2> <p>Simulating is as simple as passing the dictionary to the simulation function:</p> <pre class="language-python"><!></pre> <p>The <code>**</code> unpacks the dictionary as keywords arguments (like <code>**kwargs</code>). Here, <code>x,v</code> are large <a href="https://numpy.org/" rel="nofollow">NumPy</a> arrays. To store these arrays, I convert them to a <a href="https://pandas.pydata.org/" rel="nofollow">Pandas</a> dataframe before saving them using <a href="https://github.com/wesm/feather" rel="nofollow">Feather</a>—in fact, this is now built in to Pandas using the <code>to_feather</code> function. To save using Feather, column names must be strings.</p> <pre class="language-python"><!></pre> <p>So now we have a data file saved, named using a random string that is stored in the <code>.yaml</code> file!</p> <h2>Reading Data: Searching the YAML</h2> <p>To retrieve a data set, first create a dictionary of the parameters:</p> <pre class="language-python"><!></pre> <p>Then we search the YAML file to see if any simulations match this parameter set:</p> <pre class="language-python"><!></pre> <p>Finally to read the data in:</p> <pre class="language-python"><!></pre> <p>So now the two Numpy arrays have been retrieved!</p> <hr/> <p>This is one way to store parameters and data, but I’d be interested in hearing your ways! Are there glaring errors here? Get in touch!</p> <p>Questions I still have include:</p> <ul><li>When the <code>.yaml</code> file gets too big, searching for a parameter set takes longer and longer: is there a quicker way of searching? Or of splitting the <code>.yaml</code>?</li> <li>Is Feather the best format to use here?</li></ul> <h2>Useful Links</h2> <ul><li><a href="https://www.benfrederickson.com/dont-pickle-your-data/" rel="nofollow">Don’t Pickle Your Data</a></li> <li><a href="https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d" rel="nofollow">Best format for pd DataFrame</a></li> <li><a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_parquet.html#pandas.DataFrame.to_parquet" rel="nofollow">Parquet Pandas docs</a></li> <li><a href="https://blog.rstudio.com/2016/03/29/feather/" rel="nofollow">Feather</a></li> <li><a href="https://stackoverflow.com/questions/48083405/what-are-the-differences-between-feather-and-parquet" rel="nofollow">Difference between Parquet and Feather</a></li></ul>',1);function M(h){var k=D(),e=a(x(k),22),m=n(e);t(m,()=>`<code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
	<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">".yaml"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
		history <span class="token operator">=</span> yaml<span class="token punctuation">.</span>safe_load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Error reading the config file"</span><span class="token punctuation">)</span></code>`),s(e);var o=a(e,4),f=n(o);t(f,()=>`<code class="language-python"><span class="token keyword">for</span> name <span class="token keyword">in</span> history<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Given parameters are exact match of existing set:"</span><span class="token punctuation">)</span>
        filename <span class="token operator">=</span> name</code>`),s(o);var p=a(o,4),y=n(p);t(y,()=>`<code class="language-python"><span class="token keyword">elif</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>
      <span class="token string">"Given parameters are subset of existing set, additional parameters are:"</span>
  <span class="token punctuation">)</span>
  additional_parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
      k<span class="token punctuation">:</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token builtin">set</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>additional_parameters<span class="token punctuation">)</span>
  filename <span class="token operator">=</span> name</code>`),s(p);var i=a(p,6),g=n(i);t(g,()=>`<code class="language-python">filename <span class="token operator">=</span> coolname<span class="token punctuation">.</span>generate_slug<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>file_path <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">".yaml"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>
    <span class="token comment"># Add parameters and name to dictionary</span>
	history<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>filename<span class="token punctuation">:</span> parameters<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token comment"># Update the yaml file</span>
    yaml<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>history<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span></code>`),s(i);var c=a(i,6),w=n(c);t(w,()=>'<code class="language-python">x<span class="token punctuation">,</span> v <span class="token operator">=</span> ParticleSystem<span class="token punctuation">(</span><span class="token operator">**</span>parameters<span class="token punctuation">)</span><span class="token punctuation">.</span>get_trajectories<span class="token punctuation">(</span><span class="token punctuation">)</span></code>'),s(c);var r=a(c,4),b=n(r);t(b,()=>`<code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
position_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
velocity_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>v<span class="token punctuation">)</span>

<span class="token comment"># Map column names to strings</span>
position_df<span class="token punctuation">.</span>columns <span class="token operator">=</span> position_df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>
velocity_df<span class="token punctuation">.</span>columns <span class="token operator">=</span> velocity_df<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>

velocity_df<span class="token punctuation">.</span>to_feather<span class="token punctuation">(</span>filepath <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"_v"</span><span class="token punctuation">)</span>
position_df<span class="token punctuation">.</span>to_feather<span class="token punctuation">(</span>filepath <span class="token operator">+</span> filename <span class="token operator">+</span> <span class="token string">"_x"</span><span class="token punctuation">)</span></code>`),s(r);var l=a(r,8),v=n(l);t(v,()=>`<code class="language-python">parameters<span class="token operator">=</span><span class="token punctuation">&#123;</span>
    <span class="token string">"T_end"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`),s(l);var u=a(l,4),_=n(u);t(_,()=>`<code class="language-python"><span class="token keyword">for</span> name <span class="token keyword">in</span> history<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">if</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
 		<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Given parameters are exact match of existing set:"</span><span class="token punctuation">)</span>
        filename <span class="token operator">=</span> name
	<span class="token keyword">elif</span> parameters<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span>
                <span class="token string">"Given parameters are subset of existing set, additional parameters are:"</span>
            <span class="token punctuation">)</span>
		additional_parameters <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        	k<span class="token punctuation">:</span> history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">set</span><span class="token punctuation">(</span>history<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">set</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span>additional_parameters<span class="token punctuation">)</span>
        filename <span class="token operator">=</span> name

<span class="token keyword">if</span> filename <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not find matching parameter set"</span><span class="token punctuation">)</span></code>`),s(u);var d=a(u,4),I=n(d);t(I,()=>`<code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>
	test_data <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>file_path <span class="token operator">+</span> filename<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Could not find file &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
parameters <span class="token operator">=</span> history<span class="token punctuation">.</span>get<span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
x<span class="token punctuation">,</span> v <span class="token operator">=</span> test_data<span class="token punctuation">[</span><span class="token string">"Position"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> test_data<span class="token punctuation">[</span><span class="token string">"Velocity"</span><span class="token punctuation">]</span></code>`),s(d),P(14),F(h,k)}export{M as default,S as metadata};
